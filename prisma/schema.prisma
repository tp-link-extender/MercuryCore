// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Sections are commented out, not yet implemented

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_URL")
}

// Users & Groups

model User {
    id      String    @id @unique @default(uuid())
    session Session[]
    Key     Key[]

    number          Int      @unique @default(autoincrement())
    username        String   @unique
    email           String   @unique
    displayname     String
    usedRegkey      Regkey   @relation(fields: [regkeyKey], references: [key])
    regkeyKey       String
    permissionLevel Int      @default(1) // 1: Regular user 2: Verified (email or Discord) 3: Moderator 4: Catalog Manager 5: Administrator
    bio             String?
    image           String?
    created         DateTime @default(now())
    lastOnline      DateTime @default(now())
    status          String?
    currency        Int      @default(0)
    // groupsOwned  Group[] @relation("owner")
    // groupsJoined Group[] @relation("member")
    places          Place[]
    posts           Post[]
    itemsCreated    Item[]
    itemsOwned      Item[]   @relation("owns")
    itemsWorn       Item[]   @relation("wears")

    @@map("user")
}

model Key {
    id              String  @id @unique
    hashed_password String?
    user_id         String
    primary         Boolean
    user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
    @@map("key")
}

model Session {
    id             String @id @unique
    user_id        String
    active_expires BigInt
    idle_expires   BigInt
    user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
    @@map("session")
}

model Regkey {
    key      String    @unique @default(cuid())
    usesLeft Int       @default(1)
    expiry   DateTime?
    users    User[]
}

model Post {
    id             String   @id @unique @default(cuid())
    author         User     @relation(fields: [authorUsername], references: [username])
    authorUsername String
    posted         DateTime @default(now())
    content        String
}

// model Group {
//     name          String       @id @unique
//     owner         User         @relation(name: "owner", fields: [ownerUsername], references: [username])
//     ownerUsername String
//     members       User[]       @relation("member")
//     places        GroupPlace[]
//     posts         GroupPost[]
// }

// Places

model Place {
    name          String
    slug          String @id @unique
    owner         User   @relation(fields: [ownerUsername], references: [username])
    ownerUsername String
    description   String
    image         String

    created DateTime @default(now())
    updated DateTime @default(now())
}

// model GroupPlace {
//     name        String
//     slug          String @id @unique
//     owner       Group  @relation(fields: [groupName], references: [name])
//     groupName   String
//     description String

//     created DateTime @default(now())
//     updated DateTime @default(now())
// }

enum ItemCategory {
    TShirt
    Shirt
    Pants
    HeadShape
    Hair
    Face
    Skirt
    Dress
    Hat
    Headgear
    Gear
    Neck
    Back
    Shoulder
}

model Item {
    name        String
    id          String       @id @unique @default(cuid())
    price       Int
    category    ItemCategory
    creator     User         @relation(fields: [creatorName], references: [username])
    creatorName String
    owners      User[]       @relation("owns")
    wearers     User[]       @relation("wears")
    mesh        String
    texture     String
}
