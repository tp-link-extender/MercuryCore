// This is the Prisma schema file, determining the structure of the Postgres database
// and how it can be accessed by Prisma.

// Learn more about it in the docs: https://pris.ly/d/prisma-schema
// Sections are commented out, not yet implemented

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_URL")
}

// Users & Groups
// ADMIN LEVELS:
// 1: User
// 2: Verified
// 3: Catalog Manager
// 4: Moderator
// 5: Administrator

model User {
    id      String    @id @unique @default(uuid())
    session Session[]
    Key     Key[]

    number               Int           @unique @default(autoincrement())
    username             String        @unique
    email                String        @unique
    usedRegkey           Regkey        @relation(fields: [regkeyKey], references: [key])
    regkeyKey            String
    permissionLevel      Int           @default(1)
    bio                  String?
    image                String?
    created              DateTime      @default(now())
    lastOnline           DateTime      @default(now())
    currencyCollected    DateTime      @default(now())
    status               String?
    currency             Int           @default(0)
    groupsOwned          Group[]
    places               Place[]
    posts                Post[]
    itemsCreated         Item[]
    itemsOwned           Item[]        @relation("owns")
    itemsWorn            Item[]        @relation("wears")
    transactionsSent     Transaction[] @relation("sent")
    transactionsReceived Transaction[] @relation("received")

    bodyColours Json @default("{\"Head\": \"24\",\"Torso\": \"23\",\"LeftArm\": \"24\",\"RightArm\": \"24\",\"LeftLeg\": \"119\",\"RightLeg\": \"119\"}")
    // {"Head": "24","Torso": "23","LeftArm": "24","RightArm": "24","LeftLeg": "119","RightLeg": "119"}

    theme             String?
    animationSettings String?
    GameSessions      GameSessions[]
    Announcements     Announcements[]
    forumPosts        ForumPost[]
    forumReplies      ForumReply[]
    reportsSent       Report[]        @relation("sent")
    reportsReceived   Report[]        @relation("received")

    moderationActionsGiven    ModerationAction[] @relation("given")
    moderationActionsReceived ModerationAction[] @relation("received")

    @@map("user")
}

model Key {
    id              String  @id @unique
    hashed_password String?
    user_id         String
    primary         Boolean
    user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)
    expires         BigInt?

    @@index([user_id])
    @@map("key")
}

model Session {
    id             String @id @unique
    user_id        String
    active_expires BigInt
    idle_expires   BigInt
    user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

    @@index([user_id])
    @@map("session")
}

model Announcements {
    id        String  @id @unique @default(cuid())
    body      String
    bgColour  String
    textLight Boolean
    active    Boolean @default(true)
    creatorId String
    user      User    @relation(references: [id], fields: [creatorId], onDelete: Cascade)
}

model GameSessions {
    place   Place   @relation(references: [id], fields: [placeId], onDelete: Cascade)
    placeId Int
    user    User    @relation(references: [id], fields: [userId], onDelete: Cascade)
    userId  String
    ticket  String  @id @unique @default(uuid())
    ping    BigInt  @default(0)
    valid   Boolean @default(true)
}

model Regkey {
    key      String    @unique @default(cuid())
    usesLeft Int       @default(1)
    expiry   DateTime?
    users    User[]
}

model Post {
    id              String   @id @unique @default(cuid())
    authorUser      User?    @relation(fields: [authorUsername], references: [username])
    authorUsername  String?
    authorGroup     Group?   @relation(fields: [authorGroupname], references: [name])
    authorGroupname String?
    posted          DateTime @default(now())
    content         String
}

model Group {
    name          String  @id @unique
    owner         User    @relation(fields: [ownerUsername], references: [username])
    ownerUsername String
    places        Place[]
    posts         Post[]
}

// Places

model Place {
    id Int @id @unique @default(autoincrement())

    name           String
    ownerUser      User?   @relation(fields: [ownerUsername], references: [username])
    ownerUsername  String?
    ownerGroup     Group?  @relation(fields: [ownerGroupname], references: [name])
    ownerGroupname String?

    serverIP      String
    serverPort    Int
    serverTicket  String  @unique @default(cuid())
    serverPing    BigInt  @default(0)
    privateServer Boolean @default(false)
    privateTicket String  @unique @default(uuid())

    description String
    image       String

    maxPlayers Int

    created      DateTime       @default(now())
    updated      DateTime       @default(now())
    deleted      Boolean        @default(false)
    GameSessions GameSessions[]
}

// Items

enum ItemCategory {
    TShirt
    Shirt
    Pants
    HeadShape
    Hair
    Face
    Skirt
    Dress
    Hat
    Headgear
    Gear
    Neck
    Back
    Shoulder
}

model Item {
    name        String
    id          String       @id @unique
    price       Int
    category    ItemCategory
    creator     User         @relation(fields: [creatorName], references: [username])
    creatorName String
    owners      User[]       @relation("owns")
    wearers     User[]       @relation("wears")
    mesh        String
    texture     String
}

model Transaction {
    id           String   @id @unique @default(cuid())
    sender       User     @relation("sent", fields: [senderName], references: [username])
    senderName   String
    receiver     User     @relation("received", fields: [receiverName], references: [username])
    receiverName String
    amountSent   Int
    taxRate      Float
    time         DateTime @default(now())
    note         String?
    link         String?
}

// Forum

model ForumCategory {
    name        String      @id @unique
    posts       ForumPost[]
    description String
}

model ForumPost {
    id                String        @id @unique
    author            User          @relation(fields: [authorId], references: [id])
    authorId          String
    posted            DateTime      @default(now())
    title             String
    content           String
    forumCategory     ForumCategory @relation(fields: [forumCategoryName], references: [name])
    forumCategoryName String
    replies           ForumReply[]
}

model ForumReply {
    id       String   @id @unique
    author   User     @relation(fields: [authorId], references: [id])
    authorId String
    posted   DateTime @default(now())
    content  String

    // A reply can be to a post or another reply
    parentPost    ForumPost?   @relation(fields: [parentPostId], references: [id])
    parentPostId  String?
    parentReply   ForumReply?  @relation("replies", fields: [parentReplyId], references: [id])
    parentReplyId String?
    replies       ForumReply[] @relation("replies")
}

// Reports

enum ReportCategory {
    AccountTheft
    Dating
    Exploiting
    Harassment
    InappropriateContent
    PersonalInformation
    Scamming
    Spam
    Swearing
    Threats
    Under13
}

model Report {
    id         String   @id @unique @default(cuid())
    reporter   User     @relation("sent", fields: [reporterId], references: [id])
    reporterId String
    reportee   User     @relation("received", fields: [reporteeId], references: [id])
    reporteeId String
    time       DateTime @default(now())

    note     String? // Note from the reporter
    url      String
    category ReportCategory
    inGame   Boolean        @default(false)
}

enum ModerationActionType {
    Reminder
    Warning
    Ban
    Termination
}

model ModerationAction {
    id          String   @id @unique @default(cuid())
    moderator   User     @relation("given", fields: [moderatorId], references: [id])
    moderatorId String
    moderatee   User     @relation("received", fields: [moderateeId], references: [id])
    moderateeId String
    time        DateTime @default(now())

    note       String
    materials  String?
    type       ModerationActionType
    daysLength Int?
    active     Boolean              @default(true)
}
